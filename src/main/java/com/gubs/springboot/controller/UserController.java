package com.gubs.springboot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.gubs.springboot.entity.User;
import com.gubs.springboot.repository.UserRepository;

// https://auth0.com/blog/implementing-jwt-authentication-on-spring-boot/
// https://docs.spring.io/spring-security/site/docs/current/guides/html5/helloworld-boot.html
@RestController    // This means that this class is a @Controller  + @ResponseBody
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	// http://localhost:8080/demo/add?name=gubs&email=gubs@jeanmartin.com
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	// http://localhost:8080/demo/all
	@GetMapping(path="/all")
	public Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}